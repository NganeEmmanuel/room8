---
- name: Create ArgoCD namespace
  shell: |
    kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
  args:
    executable: /bin/bash
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Apply ArgoCD core manifests
  shell: |
    kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
  args:
    executable: /bin/bash
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Wait for ArgoCD pods to be ready
  shell: |
    kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
  args:
    executable: /bin/bash
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Patch ArgoCD server to add --insecure to args
  shell: |
    kubectl patch deployment argocd-server -n argocd --type=json \
    -p='[
      {
        "op": "add",
        "path": "/spec/template/spec/containers/0/args/1",
        "value": "--insecure"
      }
    ]'
  args:
    executable: /bin/bash
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf


- name: Patch argocd-cm ConfigMap to set rootpath to /argocd
  shell: |
    kubectl patch configmap argocd-cm -n argocd --type merge -p '{"data":{"server.rootpath":"/argocd","server.insecure":"true"}}'
  args:
    executable: /bin/bash
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Safely append ARGOCD_SERVER_ROOTPATH env var to ArgoCD server
  shell: |
    kubectl -n argocd patch deployment argocd-server \
    --type='json' \
    -p='[
      {
        "op": "add",
        "path": "/spec/template/spec/containers/0/env/-",
        "value": {
          "name": "ARGOCD_SERVER_ROOTPATH",
          "value": "/argocd"
        }
      }
    ]'
  args:
    executable: /bin/bash
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf



- name: Restart ArgoCD server after patching command
  shell: |
    kubectl rollout restart deployment argocd-server -n argocd
  args:
    executable: /bin/bash
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Copy ArgoCD ingress.yaml to remote
  copy:
    src: roles/k8s/argocd/ingress.yaml
    dest: /tmp/argocd-ingress.yaml

- name: Apply ArgoCD ingress
  shell: |
    kubectl apply -f /tmp/argocd-ingress.yaml
  args:
    executable: /bin/bash
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Remove temporary ingress file
  file:
    path: /tmp/argocd-ingress.yaml
    state: absent

- name: Get ArgoCD admin password
  shell: |
    kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 -d
  register: argocd_admin_password
  changed_when: false
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Show ArgoCD access info
  debug:
    msg: |
      ➤  ArgoCD has been successfully deployed!
      ➤  URL: http://{{ master_node }}/
      ➤  Username: admin
      ➤  Password: {{ argocd_admin_password.stdout }}
